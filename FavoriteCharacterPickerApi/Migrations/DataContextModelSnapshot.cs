// <auto-generated />
using System;
using FavoriteCharacterPickerApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FavoriteCharacterPickerApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CharacterQuiz", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("integer");

                    b.Property<int>("QuizzesContainingId")
                        .HasColumnType("integer");

                    b.HasKey("CharactersId", "QuizzesContainingId");

                    b.HasIndex("QuizzesContainingId");

                    b.ToTable("CharacterQuiz");
                });

            modelBuilder.Entity("CharacterQuizResult", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("integer");

                    b.Property<int>("QuizResultsContainingId")
                        .HasColumnType("integer");

                    b.HasKey("CharactersId", "QuizResultsContainingId");

                    b.HasIndex("QuizResultsContainingId");

                    b.ToTable("CharacterQuizResult");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<int>("TitleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.QuizComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("ParrentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParrentId");

                    b.ToTable("QuizComments");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.QuizResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizTag", b =>
                {
                    b.Property<int>("QuizzesContainingId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("QuizzesContainingId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("QuizTag");
                });

            modelBuilder.Entity("QuizUser", b =>
                {
                    b.Property<int>("FavoriteQuizzesId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersWithFavoriteId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteQuizzesId", "UsersWithFavoriteId");

                    b.HasIndex("UsersWithFavoriteId");

                    b.ToTable("QuizUser");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<int>("FollowedUsersId")
                        .HasColumnType("integer");

                    b.Property<int>("FollowingUsersId")
                        .HasColumnType("integer");

                    b.HasKey("FollowedUsersId", "FollowingUsersId");

                    b.HasIndex("FollowingUsersId");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("CharacterQuiz", b =>
                {
                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesContainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterQuizResult", b =>
                {
                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.QuizResult", null)
                        .WithMany()
                        .HasForeignKey("QuizResultsContainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.Character", b =>
                {
                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.Title", "Title")
                        .WithMany("CharactersContaining")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.Quiz", b =>
                {
                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.User", "Author")
                        .WithMany("CreatedQuizzse")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.QuizComment", b =>
                {
                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.User", "Author")
                        .WithMany("CreatedComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.QuizComment", "Parrent")
                        .WithMany()
                        .HasForeignKey("ParrentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Parrent");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.QuizResult", b =>
                {
                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.User", "User")
                        .WithMany("QuizResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizTag", b =>
                {
                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesContainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizUser", b =>
                {
                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.Quiz", null)
                        .WithMany()
                        .HasForeignKey("FavoriteQuizzesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersWithFavoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FavoriteCharacterPickerApi.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowingUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.Title", b =>
                {
                    b.Navigation("CharactersContaining");
                });

            modelBuilder.Entity("FavoriteCharacterPickerApi.Data.Entities.User", b =>
                {
                    b.Navigation("CreatedComments");

                    b.Navigation("CreatedQuizzse");

                    b.Navigation("QuizResults");
                });
#pragma warning restore 612, 618
        }
    }
}
